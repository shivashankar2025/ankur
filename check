import os
import re
import ssl
import socket
import whois
import requests
from bs4 import BeautifulSoup
from datetime import datetime
from urllib.parse import urlparse, urljoin
from dotenv import load_dotenv
import openai
import gradio as gr
import time
import dns.resolver

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from dateutil import parser
from concurrent.futures import ThreadPoolExecutor

# Trusted Certificate Authorities
TRUSTED_CAS = [
    "DigiCert", "GlobalSign", "Sectigo", "Entrust", "Let's Encrypt",
    "GoDaddy", "Thawte", "Google Trust Services", "Amazon Trust Services"
]

# -------------------------------
# ENVIRONMENT SETUP
# -------------------------------

load_dotenv(override=True)
api_key = os.getenv("OPENAI_API_KEY")

# Check if API key is loaded
if not api_key:
    raise ValueError("OPENAI_API_KEY environment variable not set.")

client = openai.OpenAI(api_key=api_key)

# -------------------------------
# WEBSITE SUMMARIZER CLASS
# -------------------------------

class WebsiteSummarizer:
    def __init__(self, model="gpt-4o"):
        self.client = client
        self.model = model
        self.executor = ThreadPoolExecutor(max_workers=5)

    def _normalize_url(self, url):
        if not re.match(r'^[a-zA-Z]+://', url):
            url = 'https://' + url
        return url

    def fetch_html_selenium(self, url):
        options = Options()
        options.add_argument("--headless=new")
        options.add_argument("--disable-gpu")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--window-size=1920,1080")
        options.add_argument("--start-maximized")
        options.add_argument("--disable-infobars")
        options.add_argument("--disable-browser-side-navigation")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-extensions")
        options.add_argument("--blink-settings=imagesEnabled=false")

        driver = None
        try:
            driver = webdriver.Chrome(options=options)
            driver.set_page_load_timeout(30)
            driver.get(url)
            time.sleep(5)
            html = driver.page_source
            return html
        except Exception as e:
            print(f"Selenium fetch error for {url}: {e}")
            return None
        finally:
            if driver:
                driver.quit()

    def check_ssl(self, url):
        try:
            parsed = urlparse(url)
            hostname = parsed.hostname
            if ':' in hostname:
                hostname = hostname.split(':')[0]
            ctx = ssl.create_default_context()
            with ctx.wrap_socket(socket.socket(), server_hostname=hostname) as s:
                s.settimeout(5)
                s.connect((hostname, 443))
                cert = s.getpeercert()

            issuer = dict(x[0] for x in cert['issuer'])
            org = issuer.get('O', 'Unknown')
            trusted = any(ca.lower() in org.lower() for ca in TRUSTED_CAS)

            expiry_date = datetime.strptime(cert['notAfter'], '%b %d %H:%M:%S %Y %Z')
            days_left = (expiry_date - datetime.utcnow()).days

            if days_left < 0:
                return False, f"Expired SSL certificate from {org} (expired {abs(days_left)} days ago)"
            if not trusted:
                return False, f"Untrusted CA: {org}"
            return True, f"Valid certificate from {org}, expires in {days_left} days"
        except Exception as e:
            return False, f"SSL check failed: {e}"

    def check_domain_age(self, url):
        try:
            domain = urlparse(url).netloc or urlparse(url).path
            if domain.startswith("www."):
                domain = domain[4:]
            w = whois.whois(domain)
            creation_date = w.creation_date
            if isinstance(creation_date, list):
                creation_date = creation_date[0]
            if not creation_date:
                return 0, "No creation date found"
            age = (datetime.utcnow() - creation_date).days // 30
            return age, f"{age} months"
        except Exception as e:
            return 0, f"Domain age check failed: {e}"

# -------------------------------
# GRADIO INTERFACE (stub)
# -------------------------------

summarizer = WebsiteSummarizer()

iface = gr.Interface(
    fn=summarizer.check_ssl,
    inputs=gr.Textbox(label="Website URL", placeholder="e.g., https://www.example.com or example.com"),
    outputs=gr.Textbox(label="SSL Result"),
    title="🌐 Website SSL Validator",
    description="Enter a website URL to check SSL certificate trust and expiry."
)

iface.launch()
